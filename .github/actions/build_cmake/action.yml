name: Build for Doxygen
description: Steps to build doxygen for a single platform
inputs:
  config_name:
    description: Platform name
    required: true
  config_os:
    description: Operating system to use
    required: true
  config_build_type:
    description: Release or debug build
    required: true
  config_cc:
    description: C compiler name
    required: true
  config_cxx:
    description: C++ compiler name
    required: true
  config_build_gen:
    description: CMake build generator to use
    required: true

runs:
  using: "composite"
  steps:
  - name: Checkout doxygen
    uses: actions/checkout@v4
    with:
      fetch-depth: 0

  - name: Install libiconv (Windows)
    uses: suisei-cn/actions-download-file@v1
    with:
      url: "https://github.com/pffang/libiconv-for-Windows/releases/download/v1.16/libiconv-for-Windows_1.16.7z"
      target: .
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Install LaTeX (Linux)
    shell: bash
    run: |
      sudo apt update --fix-missing
      sudo apt upgrade
      sudo apt update
      sudo apt-get install texlive texlive-latex-recommended texlive-extra-utils texlive-latex-extra texlive-font-utils
    if: startsWith(${{ inputs.config_os }},'ubuntu-')

  - name: Install LaTeX (MacOS)
    shell: bash
    run: |
      brew update || true
      brew install --cask mactex || true
      echo "/Library/TeX/texbin/" >> $GITHUB_PATH
    if: startsWith(${{ inputs.config_os }},'macos-')

  - name: Install libclang (Ubuntu 20.04)
    shell: bash
    run: |
      sudo apt update
      sudo apt remove llvm-8 clang-8 libclang-common-8-dev clang-format-8 libllvm8
      sudo apt remove llvm-9 llvm-9-dev llvm-9-tools llvm-9-runtime clang-9 libclang-common-9-dev clang-format-9 libllvm9
      #sudo apt remove llvm-10 llvm-10-dev llvm-10-tools llvm-10-runtime clang-10 clang-format-10 libclang-common-10-dev libclang-cpp10 libclang1-10 libllvm10
      sudo apt remove llvm-11 llvm-11-dev llvm-11-tools llvm-11-runtime clang-11 clang-format-11 libclang-common-11-dev libclang-cpp11 libclang1-11 libllvm11
      sudo apt remove llvm-12 llvm-12-dev llvm-12-tools llvm-12-runtime clang-12 clang-format-12 libclang-common-12-dev libclang-cpp12 libclang1-12 libllvm12
      sudo apt-get autoremove
      sudo apt-get clean
      sudo apt install libclang-common-10-dev libclang-10-dev
      apt list --installed | egrep '(clang|llvm)'
      ls -d /usr/lib/llvm-*/include/
      sudo update-alternatives --install /usr/bin/clang   clang   /usr/bin/clang-10   100
      sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 100
      ls -al /usr/bin/clang++
      ls -al /etc/alternatives/clang++
      which clang++
      clang++ -v
    if: ${{ inputs.config_os }} == 'ubuntu-20.04'

  - name: Install libxapian (Ubuntu 20.04)
    shell: bash
    run: |
      sudo apt update
      sudo apt install libxapian-dev
    if: ${{ inputs.config_os }} == 'ubuntu-20.04'

  - name: Install LaTeX (Windows)
    uses: teatimeguest/setup-texlive-action@v3
    with:
      packages: >-
        scheme-medium
        collection-latexextra
        babel-dutch
        cjk
        bibtex
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Install Ghostscript (Linux)
    shell: bash
    run: |
      sudo apt update
      sudo apt-get install ghostscript
    if: startsWith(${{ inputs.config_os }},'ubuntu-')

  - name: Install Ghostscript (Windows)
    shell: bash
    run:
      choco install ghostscript
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Setting Ghostscript paths (Windows)
    shell: bash
    run: |
      export GSpath=`find /c/Prog*/gs -name gswin\*c.exe | sed -e "s/gswin.*c.exe//"`
      export PATH="$GSpath:$PATH"
      export GSpath=`echo "$GSpath" | sed -e "s%/c%C:%"`
      echo "$GSpath" >> $GITHUB_PATH
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Install xmllint (Linux)
    shell: bash
    run: |
       sudo apt-get update
       sudo apt-get install libxml2-utils
    if: startsWith(${{ inputs.config_os }},'ubuntu-')

  - name: Install xmllint (MacOS)
    shell: bash
    run: |
       brew install --force --overwrite python@3.11 # temp hack
       brew install --force --overwrite python@3.12 # temp hack
       brew update
       brew install libxml2
    if: startsWith(${{ inputs.config_os }},'macos-')

  - name: Install bison (MacOS)
    shell: bash
    run: |
      brew update
      brew install bison;
      echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
      #echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
    if: startsWith(${{ inputs.config_os }},'macos-')

  - name: Install bison/flex (Windows)
    shell: bash
    run: |
      #Choco-Install -PackageName winflexbison
      choco install winflexbison3
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Install Graphviz (Linux)
    shell: bash
    run: |
      sudo apt update
      sudo apt-get install graphviz
    if: startsWith(${{ inputs.config_os }},'ubuntu-')

  - name: Install Graphviz (MacOS)
    shell: bash
    run: |
      if ! brew install graphviz; then
        # Workaround issue with unexpected symlinks: https://github.com/actions/runner-images/issues/6817
        for f in 2to3 idle3 pydoc3 python3 python3-config; do
          rm /usr/local/bin/$f || true
        done
        # Try again
        brew install graphviz
      fi
    if: startsWith(${{ inputs.config_os }},'macos-')

  - name: Install Graphviz (Windows)
    shell: bash
    run:
      choco install graphviz.portable
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Setup VS Environment (Windows)
    uses: seanmiddleditch/gha-setup-vsdevenv@master
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Refresh Env (Windows)
    shell: bash
    run: |
      Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
      refreshenv
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Install Qt 6
    uses: jurplel/install-qt-action@v4
    with:
      version: 6.2.*
    if: startsWith(${{ inputs.config_os }},'macos-')

  - name: Install Qt 5
    uses: jurplel/install-qt-action@v4
    with:
      version: 5.*
    if: startsWith(${{ inputs.config_os }},'macos-')!=true

  - name: Check tool versions (Linux / MacOS)
    shell: bash
    run: |
      echo "=== perl ===";
      perl --version;
      echo "=== python ===";
      python --version;
      echo "=== cmake ===";
      cmake --version;
      echo "=== latex ===";
      latex --version;
      echo "=== bibtex ===";
      bibtex --version
      echo "=== dvips ===";
      dvips --version
      echo "=== bison ===";
      bison --version;
      echo "=== flex ===";
      flex --version;
      echo "=== dot ===";
      dot -V;
      echo "=== ghostscript ===";
      gs --version;
    if: ${{ inputs.config_os }} != 'windows-latest'

  - name: Check tool versions (Windows)
    shell: bash
    run: |
      echo "=== perl ===";
      perl --version;
      echo "=== python ===";
      python --version;
      echo "=== cmake ===";
      cmake --version;
      echo "=== latex ===";
      latex --version;
      echo "=== bibtex ===";
      bibtex --version
      echo "=== dvips ===";
      dvips --version
      echo "=== bison ===";
      win_bison --version;
      echo "=== flex ===";
      win_flex --version;
      echo "=== dot ===";
      dot -V;
      echo "=== ghostscript ===";
      gswin64c --version;
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Configure
    shell: cmake -P {0}
    run: |
      set(ENV{CC} ${{ inputs.config_cc }})
      set(ENV{CXX} ${{ inputs.config_cxx }})

      execute_process(
        COMMAND cmake
          -S .
          -B build
          -D CMAKE_BUILD_TYPE=${{ inputs.config_build_type }}
          -G "${{ inputs.config_build_gen }}"
          -Dbuild_doc=YES
          -Dbuild_wizard=YES
          ${{ inputs.config_cmake_extra_opts }}
        RESULT_VARIABLE result
      )
      if (NOT result EQUAL 0)
        message(FATAL_ERROR "Bad exit status")
      endif()

  - name: Build
    shell: cmake -P {0}
    run: |
      include(ProcessorCount)
      ProcessorCount(N)
      execute_process(
        COMMAND cmake --build build --parallel ${N}
        RESULT_VARIABLE result
        OUTPUT_VARIABLE output
        ERROR_VARIABLE output
        ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
      )
      if (NOT result EQUAL 0)
        string(REGEX MATCH "FAILED:.*$" error_message "${output}")
        string(REPLACE "\n" "%0A" error_message "${error_message}")
        message("::error::${error_message}")
        message(FATAL_ERROR "Build failed")
      endif()

  - name: Archive build artifacts
    uses: actions/upload-artifact@v4
    with:
      name: "${{ inputs.config_name }} build artifacts"
      path: build/bin/

  - name: Run tests (Linux / MacOS)
    shell: cmake -P {0}
    run: |
      set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

      execute_process(
        COMMAND
          cmake -E env TEST_FLAGS="--xml --xmlxsd --xhtml --qhp --docbook --rtf"
          cmake --build build --target tests
        RESULT_VARIABLE result
      )
      if (NOT result EQUAL 0)
        message(FATAL_ERROR "Running tests failed!")
      endif()
    if: ${{ inputs.config_os }} != 'windows-latest'

  - name: Run tests (Windows)
    shell: cmake -P {0}
    run: |
      set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

      execute_process(
        COMMAND
          cmake -E env TEST_FLAGS="--xml --xmlxsd --xhtml --qhp --docbook --rtf --pdf"
          cmake --build build --target tests
        RESULT_VARIABLE result
      )
      if (NOT result EQUAL 0)
        message(FATAL_ERROR "Running tests failed!")
      endif()
    if: ${{ inputs.config_os }} == 'windows-latest'

  - name: Generate documentation
    shell: cmake -P {0}
    run: |
      execute_process(
        COMMAND cmake --build build --target docs
        RESULT_VARIABLE result
      )
      if (NOT result EQUAL 0)
        message(FATAL_ERROR "Building documentation failed")
      endif()

